/*!
 *  \file JetCreator.cpp
 *  \brief Source file for \ref JetCreator function implementation
 */

/*! \fn vector<PseudoJet> JetCreator(vector<PseudoJet> particles, double R, double pT_min) ""

 *  \brief Function that clusters particles to jet
 * 
*  This function is quite useful for user purpose. \ref JetCreator is designed to work with these settings:
 *  - "anti-kt" algorithm, because hard jets are exactly circular on the \f$y-\phi\f$ cylinder
 *  - "E-scheme" it is the default option used by most experiment working with jets.\n
 *     It is designed to simply add the four vectors given as input to the clustering algorithm
 *  - "Best" strategy, which choose the optimal speed strategy for each multiplicity of jet 
 * 
 *  \param particles List of particles forming the jets. A particle is defined, in this case, as a 4-vector
 * 
 *  \param R Jet radius, usually related to the angular reach of the jet. Can be found in the anti-kT algorithm formula
 *  
 *  \param pT_min Minimum transverse jet momentum that is accepted for user's analysis
 *  
*/

#include "headers/JetCreator.h"

/*These namespaces can be useful*/
using namespace std;
using namespace fastjet;

vector<PseudoJet> JetCreator(vector<PseudoJet> particles, double R, double pT_min)
{
  /*
      Here jet clustering algorithm properties are chosen:
      -which clustering algorithm should be used;
      -radius of the cone generated by jetted particles;
      -recombination scheme, usually set to E, that simply adds particles' kinematics 4-vectors;
      -strategy, usually set to best, which choose fastest way of clustering.
  */
  JetDefinition jet_def = JetDefinition(antikt_algorithm, R, E_scheme, Best);
  vector<PseudoJet> jets;

  /*
    Particles are clustered using the jet_def previously defined.
    Jets structures are returned in descending order
  */
  ClusterSequence cluster_seq(particles, jet_def);
  jets = sorted_by_pt(cluster_seq.inclusive_jets(pT_min));
  return jets;
}